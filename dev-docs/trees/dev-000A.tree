\title{Backend design}

\subtree{
\title{Concepts and overview}

\p{The main pieces of state in the backend are the [database](dev-000B) and an
in-memory hash map from [refs](dev-000D) to Automerge [document
handles](https://automerge.org/docs/repositories/dochandles/). The important
thing to realize is that nothing from Automerge is persisted through a restart
of the backend; the only thing that is persisted are serializations of the
Automerge document at various points in time. Thus, when the server restarts,
clients must request new Automerge documents. (Currently, this is not
implemented: you must refresh the client after a server restart.)}

\p{With this in mind, we outline the database schema and the operations
currently supported on the backend.}

\transclude{dev-000B}

\subtree{
\title{Capabilities of the backend}

\p{The backend has the following current and future capabilities.}

\p{\strong{Currently implemented RPC API:}}

\ul{

\li{\code{mutate new_ref(content: any): string}. Creates a new [ref](dev-000D)
with the given initial content. Returns the ID of the newly created ref as a
string representation of the UUID.}

\li{\code{query doc_id(ref_id: string): string}. Returns the Automerge document
ID associated with the given ref. If the hashmap in the backend doesn't contain
an association for that ref, then a fresh document handle is created with
initial state given by the current autosave for that ref.}

\li{\code{query head_snapshot(ref_id: string): any}. Gets the content of the
current head of a ref. This content is just a JSON object, not a live Automerge
document.}

\li{\code{mutate save_snapshot(ref_id: string, content: any)}. Saves the ref
with the given content, as described in [refs](dev-000D).} }

\p{\strong{API to implement in the future:}}

\ul{
\li{Searching for refs via their metadata.}
\li{Displaying all of the snapshots for a ref, sorted by timestamp.}
}
}
}

\subtree{
\title{Implementation details and dependencies}

\p{We have endeavored to keep the number of dependencies low, and the implementation simple. However, we do use some libraries. In this section, we document what those libraries are, and how we use them.}

\ul{
\li{[automerge-repo](https://github.com/automerge/automerge-repo/). We use automerge-repo in order to manage the websocket-based syncing of automerge documents, but we do \em{not} use its storage facilities.}
\li{[express](http://expressjs.com/). The "default choice" of nodejs http servers. We use this to host our [trpc](https://trpc.io) api.}
\li{[morgan](https://github.com/expressjs/morgan). A fairly simple request logger for express: this helps in debugging.}
\li{[pg](https://node-postgres.com/). The standard choice for using postgresql in nodejs.}
\li{[pgtyped](https://pgtyped.dev/). A program that generates typescript wrappers for postgresql queries. Use with \code{npm run compileSql}.}
\li{[zod](https://zod.dev). A validator for the input data to our queries.}
\li{[trpc](https://trpc.io). "Typed remote procedure calls". We use this so that we can access the backend from the frontend in a well-typed way.}
}
}

\subtree{
\title{Infrastructure}

\p{We have an AWS server that is pointed to by the domain name backend-next.catcolab.org. This runs an instance of the backend. This backend can be used by the frontend hosted at next.catcolab.org, or by a dev server. Note that this means that PR previews only are for the frontend. So if a PR introduces significant changes to the backend, the PR preview won't see those backend changes because it will still be pointing to whatever version of the backend is running on the server. Fortunately, we don't expect the backend to change all too much, at least compared to the frontend; it just serves blobs without caring about what's in the blobs.}

\p{The system configuration of this server is configured via nix, in the \code{infrastructure/} part of the repo. In order to change the system configuration, make sure that your ssh key is enabled for root access to the server (ask Owen for this). Then run:}

\ol{
\li{\code{nix develop}}
\li{\code{deploy .#catcolab}}
}

\p{However, this will not update the version of catcolab that is running on the server. There is currently a somewhat manual process to do this, because Owen believes that it is important for people to understand the steps of the manual process so that they can debug things when they go wrong.}

\p{On backend-next.catcolab.org, there is a git clone of the catcolab repository in \code{/var/lib/catcolab}. There is a daemon (managed via systemd) that runs \code{node dist/index.js} in \code{/var/lib/catcolab/packages/backend}. In order to upgrade the version of catcolab that is running on the server, one should:}
\ol{
\li{Log in via \code{ssh root@backend-next.catcolab.org}. If you don't have access, ask Shaowei.}
\li{Use \code{su - catcolab} to become the user \code{catcolab}.}
\li{\code{cd} into \code{/var/lib/catcolab/packages/backend}.}
\li{Use \code{git} to checkout the desired version of catcolab.}
\li{Run \code{npm run build} to produce a new \code{dist/index.js} file.}
\li{Run as user root \code{systemctl stop catcolab}; this will temporarily stop the backend. It is helpful to do this in another terminal window.}
\li{Run as user catcolab in \code{/var/lib/catcolab/packages/backend} \code{npm run migrate}. This will update the database with new any migrations that have been added since the last time the database was migrated.}
\li{Run as user root \code{systemctl start catcolab}; this will start back up the backend.}
\li{(If there are no new migrations, the previous three commands can simply be accomplished via \code{systemctl restart catcolab})}
\li{You can check the status of the catcolab daemon with \code{systemctl status catcolab}, or look at the log messages with \code{journalctl -eu catcolab}.}
}

\p{To give a new user access to the servers:}
\ol{
\li{Update the public keys in \code{infrastructure/hosts/catcolab/default.nix}.}
\li{Get someone with server access to run \code{nix develop; deploy .#catcolab}.}
}

\p{To give a new user access to the secrets:}
\ol{
\li{Update the public keys in \code{infrastructure/secrets/secrets.nix}.}
\li{Get someone with secret access to run \code{nix develop; agenix -r}.}
}

\p{If you are creating an AWS instance and setting up a CatColab backend, e.g. \code{backend-next}, for the first time:}
\ol{
\li{Use the \code{nixos/24.05.3348.7e5afd404b62-x86_64-linux} community AMI.}
\li{Add 50GB of storage to the instance.}
\li{Open ports 80, 443 for HTTP, HTTPS in addition to port 22 for SSH.}
\li{Add a public key of the machine to \code{infrastructure/secrets/secrets.nix}. You can get the public keys by running \code{ssh-keyscan <machine-ip-address>}.}
\li{In the \code{namecheap} domain name hosting service, point \code{backend-next.catcolab.org} to the instance's IP address.}
\li{Log in via \code{ssh root@backend-next.catcolab.org}. If you don't have access, ask Shaowei.}
\li{Use \code{git} to clone the catcolab repo in \code{/var/lib}. Rename the directory with \code{mv CatColab catcolab} and change ownership with \code{chown -R catcolab:catcolab catcolab}.}
\li{Use \code{su - catcolab} to become the user \code{catcolab}.}
\li{\code{cd} into \code{/var/lib/catcolab/packages/backend}.}
\li{Use \code{git} to checkout the desired version of catcolab.}
\li{Run \code{pnpm install} to install dependencies.}
}

\p{Setting up the Postgres database:}
\ol{
\li{\code{su - postgres}}
\li{\code{createuser catcolab}}
\li{\code{createdb catcolab}}
\li{\code{psql}}
  \ul{
  \li{\code{alter user catcolab with encrypted password '<password>';}}
  \li{\code{grant all privileges on database catcolab to catcolab;}}
  \li{\code{ï¹¨c catcolab postgres}}
  \li{\code{grant all on schema public to catcolab;}}
  \li{\code{exit}}
  }
}

}
